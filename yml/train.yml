
# Choose model refered to 'net/zoo/__init__.py'

# model_name : ternaus
model_name: unet_BE

# aoi   2     3      4         5         6       7          8            9
#Area Vegas Paris Shanghai  Khartoum  Urban3D  WHU-HR  Massachusetts   WHU-LR

aoi : 6

# If you adopt BE module in your model, change 'boundary' as True.
boundary : True
# boundary : False

# Number of stage in encoder. U-Net, ResUNet have 5 stage in their architecutres, while TernausNet has 6.
num_stage : 5

# Pretrained model path
model_path : ''
# model_path: '../result/models_weight/{WEIGHT_DIR}/{PRETRAIN_FILE}.pth'


train: true
infer: false
pretrained: False
nn_framework: torch
batch_size: 4
data_specs:
  width: 512
  height: 512
  dtype:
  image_type: zscore
  rescale: false
  rescale_minima: auto
  rescale_maxima: auto
  channels: 3
  label_type: mask
  is_categorical: false
  mask_channels: 2
  val_holdout_frac: 0.175
  data_workers:
  num_classes : 1
  
train_csv_dir : '../csvs/'
validation_data_csv:
inference_data_csv: 

# No augmentation! 
# If you want to add any of them, follow the discription in 'nets/transform.py/'
training_augmentation:
  augmentations:
    CenterCrop : 
      height : 512
      width : 512
      p : 1.0
  p: 1.0
  shuffle: true
validation_augmentation:
  augmentations:
    CenterCrop : 
      height : 512
      width : 512
      p : 1.0
  p: 1.0
inference_augmentation:
  augmentations:
    p: 1.0  
    
# Enough epoch was set, because we use EarlyStopping.
training:
  epochs: 10000
  steps_per_epoch:
  optimizer: adam  
  lr: 1e-4
  opt_args:


# BE module use focal+msssim+bce loss.
# If you don't need BE module(boundary=False), 'loss_mask' and 'loss_boundary' do not work. 
  loss : 
    focal:
  loss_weights : 
    focal : 1
  loss_mask:
    msssim :     
  loss_mask_weights:
    msssim : 1
  loss_boundary:
    bce :      
  loss_boundary_weights:
    bce : 1
  metrics:
    training: p
    validation: f
  checkpoint_frequency: 10
  callbacks:
    early_stopping:
        patience: 15
    model_checkpoint:
      filepath: '../result/models_weight/'
      path_aoi : 
      monitor: val_loss
    lr_schedule:
      schedule_type: arbitrary
      schedule_dict:
  verbose: true

inference:
  window_step_size_x:
  window_step_size_y:
  output_dir: 
  